security:

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        in_memory:
            memory:
                users:
                    # use bin/console security:hash-password to hash a different password
                    api_user: { password: '$2y$13$6Cc1CLoERFozkNdqHceBEeYdzZpyef2FEQovaqTbcKgF9hAATx89m', roles: 'ROLE_USER' } # password: api_user
                    api_admin: { password: '$2y$13$aWQ/vgmJFbZpfPEqCR8wxeh1AKEVu6ieSqUjO4NoBsNl0i8T4oXwG', roles: 'ROLE_ADMIN' } # password: api_admin

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # use bin/console debug:firewall for debugging
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        token:
            lazy: true
            stateless: true
            pattern: ^/token
            http_basic: true
            provider: in_memory
        api:
            lazy: true
            stateless: true
            pattern: ^/(workshops|attendees)
            custom_authenticators:
                - App\Security\JwtTokenAuthenticator
            entry_point: App\Security\JwtTokenAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    #- { path: ^/token, roles: IS_AUTHENTICATED_FULLY }
    #- { path: ^/(workshops|attendees), roles: PUBLIC_ACCESS }
    #- { path: ^/(workshops|attendees)/\d+$, roles: IS_AUTHENTICATED_FULLY }
    #- { path: ^/(workshops|attendees)/\d+$, roles: ROLE_USER, methods: [GET, POST, PUT]}
    #- { path: ^/(workshops|attendees)/\d+$, roles: ROLE_ADMIN, methods: [DELETE]}
    #- { path: ^/workshops/\d+/attendees/add/d+$, roles: ROLE_USER}
    #- { path: ^/workshops/\d+/attendees/remove/d+$, roles: ROLE_ADMIN}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
